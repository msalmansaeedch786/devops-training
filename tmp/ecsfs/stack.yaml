# == ecsfs ====================================================================

Resources:
  # VIRTUAL PRIVATE CLOUD (VPC) ===============================================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:                   # You can give
        - Key: Name           # pretty names to
          Value: ECSFS VPC    # your resources.

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      # Select the first availability zone on our current region.
      AvailabilityZone: !Select         # !Select chooses an item from a list.
        - 0                             # First availability zone, since...
        - Fn::GetAZs: !Ref AWS::Region  # ...a region has various zones (list).
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1  # Second availability zone under the same region.
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref VPC

  # NETWORK SETUP: ROUTING AND SUBNETTING =====================================
  # Public routing ------------------------------------------------------------
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetOne

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetTwo

  # Private routing -----------------------------------------------------------
  NatElasticIP:
    Type: AWS::EC2::EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatElasticIP.AllocationId
      SubnetId: !Ref PublicSubnetOne

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetOne

  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetTwo
 
  # SECURITY ==================================================================
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Fargate containers.
      VpcId: !Ref VPC

  IngressFromPublicALBSecurityGroup:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public Application Load Balancer.
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1  # Means all protocols (TCD, UDP or any ICMP/ICMPv6 number).
      SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup

  IngressFromSelfSecurityGroup:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group.
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0  # Allows all IPs. Traffic from anywhere.
          IpProtocol: -1

  # LOAD BALANCER =============================================================
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ecsfs-target-group
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  TargetGroupInternal:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ecsfs-target-group-internal
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerHTTPInternal:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupInternal
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerInternal
      Port: 5000
      Protocol: HTTP

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo

  LoadBalancerInternal:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
      Subnets:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo

  # Cluster -------------------------------------------------------------------
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ecsfs-cluster

  # Logging -------------------------------------------------------------------
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: ecsfs-logs

  # IAM Roles -----------------------------------------------------------------
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsfs-execution-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: backend-auto-scaling-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  # Task Definitions ----------------------------------------------------------
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: ecsfs-backend-td
      Cpu: 256
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: ecsfs-backend-container
          Image: 287306605618.dkr.ecr.us-east-1.amazonaws.com/ecfs-repo:backend
          PortMappings:
            - ContainerPort: 5000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: ecsfs-logs
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: backend

  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: ecsfs-frontend-td
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: ecsfs-frontend-container
          Image: 287306605618.dkr.ecr.us-east-1.amazonaws.com/ecfs-repo:frontend
          Environment: 
            - Name: DNS
              Value: !Sub
              - http://${dns_url}:${port}
              - { dns_url: !GetAtt LoadBalancerInternal.DNSName, port: 5000 } 
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: ecsfs-logs
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: frontend

  # Services ------------------------------------------------------------------
  BackendService:
    Type: AWS::ECS::Service
    DependsOn: ListenerHTTPInternal
    Properties:
      ServiceName: ecsfs-backend-service
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref PrivateSubnetOne
      TaskDefinition: !Ref BackendTaskDefinition
      LoadBalancers:
        - ContainerName: ecsfs-backend-container
          ContainerPort: 5000
          TargetGroupArn: !Ref TargetGroupInternal

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: ListenerHTTP
    Properties:
      ServiceName: ecsfs-frontend-service
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref PrivateSubnetOne
      TaskDefinition: !Ref FrontendTaskDefinition
      LoadBalancers:
        - ContainerName: ecsfs-frontend-container
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup

  # AUTO-SCALING  -------------------------------------------------------------
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt BackendService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: BackendAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: 50

# OUTPUTS =====================================================================
Outputs:
  LoadBalancerDNSName:
    Description: Copy and paste this value into your browser to access the app.
    Value: !GetAtt LoadBalancer.DNSName
